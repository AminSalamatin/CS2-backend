type User {
  id: ID!
  username: String!
  email: String!
}

type Post {
  id: ID!
  title: String!
  content: String!
  author: User!
  createdAt: String!
  comments: [Comment]
}

type PostPage {
  posts: [Post]
  numberOfPages: Int!
}

type Comment {
  id: ID!
  author: User!
  postId: ID!
  content: String!
  createdAt: String!
}

input writePost {
    title: String!
    content: String!
}

input writeComment {
    content: String!
    postId: ID!
}

type PostResponse {
  message: String!
  response: Post!
}

type CommentResponse {
  message: String!
  response: Comment!
}


input Filter {
  title: String
  authorName: String
  startDate: String
  endDate: String
  sortOrder: SortOrder
  limit: Int
  page: Int
}

enum SortOrder {
  ASC
  DESC
}

type Query {
  getPosts(filter: Filter): PostPage
  postById(id: ID!): Post
}

type Mutation {
  createPost(postContent: writePost!): PostResponse
  createComment(commentContent: writeComment!): CommentResponse
  deletePost(id: ID!): PostResponse
  deleteComment(id: ID!): CommentResponse
}
